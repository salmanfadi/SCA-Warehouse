-- Migration: 20250529_data_backup
-- Description: Backup of all data in the database tables
-- This migration exports all data from the database tables in a format that can be restored

-- Function to generate INSERT statements for all tables
CREATE OR REPLACE FUNCTION generate_insert_statements() RETURNS void AS $$
DECLARE
    r RECORD;
    table_name text;
    column_list text;
    value_list text;
    query text;
    result text;
BEGIN
    -- Loop through all tables in the public schema
    FOR table_name IN 
        SELECT information_schema.tables.table_name 
        FROM information_schema.tables 
        WHERE table_schema = 'public' 
        AND table_type = 'BASE TABLE'
        ORDER BY table_name
    LOOP
        RAISE NOTICE 'Generating INSERT statements for table: %', table_name;
        
        -- Get column names for this table
        SELECT string_agg(quote_ident(column_name), ', ') INTO column_list
        FROM information_schema.columns
        WHERE table_schema = 'public' AND table_name = table_name
        ORDER BY ordinal_position;
        
        -- Generate INSERT statements for each row
        query := 'SELECT ''INSERT INTO ' || quote_ident(table_name) || ' (' || column_list || ') VALUES ('' || ';
        
        -- Build the value list expression
        SELECT string_agg(
            'CASE WHEN ' || quote_ident(column_name) || ' IS NULL THEN ''NULL'' ' ||
            'WHEN pg_typeof(' || quote_ident(column_name) || ') IN (''text''::regtype, ''varchar''::regtype, ''char''::regtype, ''uuid''::regtype, ''date''::regtype, ''timestamp''::regtype, ''timestamptz''::regtype) THEN '''''''' || REPLACE(' || quote_ident(column_name) || '::text, '''''''', '''''''''''') || '''''''' ' ||
            'ELSE ' || quote_ident(column_name) || '::text ' ||
            'END',
            ' || '', '' || '
        ) INTO value_list
        FROM information_schema.columns
        WHERE table_schema = 'public' AND table_name = table_name
        ORDER BY ordinal_position;
        
        query := query || value_list || ' || '');'' FROM ' || quote_ident(table_name);
        
        -- Execute the query to generate INSERT statements
        FOR r IN EXECUTE query
        LOOP
            RAISE NOTICE '%', r;
        END LOOP;
    END LOOP;
END;
$$ LANGUAGE plpgsql;

-- Execute the function to generate INSERT statements
-- Note: In the actual migration, you would replace this with the actual INSERT statements
-- This is just a placeholder to show how to generate the statements
SELECT generate_insert_statements();

-- Drop the function after use
DROP FUNCTION IF EXISTS generate_insert_statements();

-- Add data export commands for each table
-- Replace these with actual data from your tables

-- Example for profiles table
-- INSERT INTO profiles (id, role, name, username, active) VALUES 
-- ('uuid-value', 'admin', 'Admin User', 'admin', true),
-- ('uuid-value', 'warehouse_manager', 'Warehouse Manager', 'manager', true);

-- Example for warehouses table
-- INSERT INTO warehouses (id, name, location, created_at) VALUES 
-- ('uuid-value', 'Main Warehouse', 'New York', '2025-05-29T00:00:00Z'),
-- ('uuid-value', 'Secondary Warehouse', 'Los Angeles', '2025-05-29T00:00:00Z');

-- Continue with INSERT statements for all other tables
-- The actual INSERT statements would be generated by running the function above
-- and replacing this section with the output

-- Note: When restoring data, make sure to disable triggers temporarily if needed
-- ALTER TABLE table_name DISABLE TRIGGER ALL;
-- ... INSERT statements ...
-- ALTER TABLE table_name ENABLE TRIGGER ALL;
